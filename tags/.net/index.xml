<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>.Net on arkadiusz wasniewski blog</title>
    <link>https://awasn.github.io/tags/.net/</link>
    <description>Recent content in .Net on arkadiusz wasniewski blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 20 Dec 2009 17:30:00 +0100</lastBuildDate>
    
	<atom:link href="https://awasn.github.io/tags/.net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TreeNode w wersji koguciej</title>
      <link>https://awasn.github.io/treenode-w-wersji-koguciej/</link>
      <pubDate>Sun, 20 Dec 2009 17:30:00 +0100</pubDate>
      
      <guid>https://awasn.github.io/treenode-w-wersji-koguciej/</guid>
      <description>Kilkukrotnie już zdarzyło się, iż potrzebowałem klasy, która umożliwiłaby zapamiętanie typowanych (typed, generic) struktur hierarchicznych (hierarchical collection) czyli dowolnego obiektu wraz z jego elementami potomnymi. W ramach platformy .NET istnieją już klasy implementujące podobną funkcjonalność. Mowa tu oczywiście o TreeNode z TreeNodeCollection oraz o, bardziej hermetycznym, MenuItem wraz z wewnętrznym MenuItemCollection. Klasy przeznaczone do obsługi menu trudno byłoby użyć do własnych rozwiązań. TreeNode jest zaś &amp;ldquo;ciężka&amp;rdquo; i brak w niej typowania, czyli możliwości określenia typu przechowywanego obiektu (precz z rzutowaniem!</description>
    </item>
    
    <item>
      <title>(K)Cultura w PowerShell</title>
      <link>https://awasn.github.io/k-cultura-w-powershell/</link>
      <pubDate>Fri, 18 Dec 2009 23:19:00 +0100</pubDate>
      
      <guid>https://awasn.github.io/k-cultura-w-powershell/</guid>
      <description>&amp;ldquo;Bo kultura tu naprawdę jest, świadczy o tym nasz wspaniały Dom Kultury&amp;rdquo; śpiewał w 1988 roku w Jarocinie zespół &amp;ldquo;Zielone Żabki&amp;rdquo;. Ktoś pamięta? Dziś też będzie o kulturze, ale przez literę c czyli o Culture. Tekst zaś dotyczył będzie tak prozaicznej kwestii jak polskie znaki narodowe.
Zacznijmy od początku. Utwórzmy, np. w Notatniku, plik w formacie CSV zawierający nazwy ptaków z polskimi znakami narodowymi:
id,nazwa 1,Gżegżółka 2,Żuraw 3,Łabędź  I spróbujmy go wczytać korzystając ze standardowego polecenia PowerShell:</description>
    </item>
    
    <item>
      <title>Hook scripts w PowerShell</title>
      <link>https://awasn.github.io/hook-scripts-w-powershell/</link>
      <pubDate>Fri, 22 May 2009 21:32:00 +0200</pubDate>
      
      <guid>https://awasn.github.io/hook-scripts-w-powershell/</guid>
      <description>Dawno, dawno temu (choć może nie aż tak dawno) popełniłem notkę na temat skryptów przechwytujących (hook scripts) dla repozytoriów systemu kontroli wersji Subversion. Chodziło o uniemożliwienie zapisania w repozytorium zmian, jeśli nie został podany do nich żaden komentarz wyjaśniający. Proponowany kod wyglądał mniej więcej tak:
private static int Main(string[] args) { string repositoryPath = args[0]; string transactionName = args[1]; var process = new Process(); process.StartInfo.FileName = &amp;quot;svnlook.exe&amp;quot;; process.StartInfo.Arguments = string.Format(&amp;quot;log -t {0} {1}&amp;quot;, transactionName, repositoryPath); process.</description>
    </item>
    
    <item>
      <title>Kiedy nie działa tryb zgodności w Windows 7</title>
      <link>https://awasn.github.io/kiedy-nie-dziala-tryb-zgodnosci-w-windows-7/</link>
      <pubDate>Wed, 20 May 2009 10:48:00 +0200</pubDate>
      
      <guid>https://awasn.github.io/kiedy-nie-dziala-tryb-zgodnosci-w-windows-7/</guid>
      <description>W razie problemów z działaniem aplikacji w systemie Windows 7 można we właściwościach danego programu (Properties –&amp;gt; Comaptibility) włączyć tryb zgodności (Compatibility mode) poprzez wybranie wcześniejszej wersji systemu operacyjnego. Do dyspozycji mamy:
 Windows 95; Windows 98 / Windows Me; Windows NT 4.0 z Service Pack 5; Windows 2000; Windows XP z Service Pack w wersji 2 lub 3; Windows Server 2003 z Service Pack 1; Windows Vista; Windows Vista z Service Pack 1 lub 2.</description>
    </item>
    
    <item>
      <title>Implementacja Inversion of Control - wersja 1.1</title>
      <link>https://awasn.github.io/implementacja-inversion-of-control-wersja-1-1/</link>
      <pubDate>Tue, 27 Jan 2009 12:38:00 +0100</pubDate>
      
      <guid>https://awasn.github.io/implementacja-inversion-of-control-wersja-1-1/</guid>
      <description>Od ostatniej notki opisującej wykorzystywany przeze mnie własnej produkcji kontener IoC wprowadziłem kilka modyfikacji czyniących rozwiązanie bardziej elastycznym, ale wciąż pozostające wierne podstawowym założeniom:
 Wydajne i łatwe w użyciu; Zminimalizowane użycie refleksji; Brak plików konfiguracyjnych.  Czymże jest kontener IoC Kontener IoC umożliwia programiście wprowadzenie w aplikacji luźnych powiązań pomiędzy obiektami. Programista rejestruje interfejsy i klasy abstrakcyjne wraz z typami implementującymi, instancjami lub procedurami tworzącymi instancje klas na żądanie:</description>
    </item>
    
    <item>
      <title>Rozwiązanie mobilne</title>
      <link>https://awasn.github.io/rozwiazanie-mobilne/</link>
      <pubDate>Thu, 11 Dec 2008 12:45:00 +0100</pubDate>
      
      <guid>https://awasn.github.io/rozwiazanie-mobilne/</guid>
      <description>Kilka miesięcy temu stałem się szczęśliwym posiadaczem projektu na przygotowanie kompletnego rozwiązania z zakresu szeroko pojętej sprzedaży dla &amp;ldquo;profesjonalnych&amp;rdquo; urządzeń mobilnych, czyli komputerów odpornych na niskie temperatury i kroploszczelne. Systemy operacyjne, które znalazły się w zasięgu projektu to:
 Microsoft Windows for Pocket PC 2003, Windows Mobile 2003; Windows Mobile 5.0 for Pocket PC, Windows Mobile 5.0 for Pocket PC Phone Edition; Windows Mobile 6 Classic, Windows Mobile 6 Professional.  Pod uwagę należało też brać możliwość pojawienia się w przyszłości konieczności działania programu w ramach Windows CE .</description>
    </item>
    
    <item>
      <title>Wartość domyślna Enum</title>
      <link>https://awasn.github.io/wartosc-domyslna-enum/</link>
      <pubDate>Tue, 18 Nov 2008 22:39:00 +0100</pubDate>
      
      <guid>https://awasn.github.io/wartosc-domyslna-enum/</guid>
      <description>Typy wyliczane umożliwiają zdefiniowanie dozwolonych wartości, które może przyjmować zmienna, parametr metody etc. w trakcie wykonania programu. Każdy ze zdefiniowanych elementów posiada odpowiadającą mu wartość liczbową typu całkowitego. Pierwszy element domyślnie przyjmuje wartość zero. Oczywiście możemy zmienić nie tylko wartość domyślną pierwszego elementu, ale również wszystkich poszczególnych elementów typu. Poniżej prosty przykład, w którym wyliczanie rozpoczynamy od liczby trzy:
internal enum DocumentType : byte { Receipt = 3, Invoice, DeliveryNote, CustomerPayment, VendorPayment, PurchaseOrder }  Co jednak się stanie w sytuacji jeśli nie zainicjujemy zmiennej typu wyliczanego?</description>
    </item>
    
    <item>
      <title>Dwie zasady projektowania klas</title>
      <link>https://awasn.github.io/dwie-zasady-projektowania-klas/</link>
      <pubDate>Thu, 06 Nov 2008 23:22:00 +0100</pubDate>
      
      <guid>https://awasn.github.io/dwie-zasady-projektowania-klas/</guid>
      <description>Jedna z zasad dobrego projektowania klas to rezygnacja z pól na rzecz właściwości. Jedna z zasad wydajnego programowania (dotyczy zwłaszcza .NET Compact Framework) przy tworzeniu klas to rezygnacja z właściwości na rzecz pól.
.NET Compact Framework version 2.0 Performance and Working Set FAQ: &amp;ldquo;Simple property access can be inlined by JIT, but no assumptions should be made about this [&amp;hellip;] Accessing fields directly normally results in better performance&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Typy wyliczane czy klasy</title>
      <link>https://awasn.github.io/typy-wyliczane-czy-klasy/</link>
      <pubDate>Fri, 24 Oct 2008 12:20:00 +0200</pubDate>
      
      <guid>https://awasn.github.io/typy-wyliczane-czy-klasy/</guid>
      <description>Tak to już jest, iż programując bardzo często stajemy przed koniecznością wyboru rozwiązania, będąc gdzieś w połowie drogi pomiędzy &amp;ldquo;najlepszymi technikami&amp;rdquo;. Jeden z takich przypadków, ale bez wybrania najlepszej drogi, chciałbym opisać poniżej.
Załóżmy, iż budujemy aplikację służącą sprzedaży Na początek będziemy wykorzystywać dwa typy dokumentów: paragon i fakturą. W kodzie tworzymy odpowiadający temu typ wyliczany:
internal enum DocumentType { Receipt, Invoice }  Następnie pojawiają się nowe wymagania. Potrzebujemy powiązać z typami dokumentów skrót, czyli kilkuznakowy identyfikator, który będzie wykorzystywany:</description>
    </item>
    
    <item>
      <title>Y2K atakuje po latach</title>
      <link>https://awasn.github.io/y2k-atakuje-po-latach/</link>
      <pubDate>Thu, 25 Sep 2008 15:04:00 +0200</pubDate>
      
      <guid>https://awasn.github.io/y2k-atakuje-po-latach/</guid>
      <description>Niektórzy pewnie pamiętają mój wpis dotyczący plików DBF. Nagłówek pliku DBF zawiera datę, gdzie na rok, miesiąc i dzień przeznaczone jest po jednym bajcie.
[StructLayout(LayoutKind.Sequential)] internal struct Dbf3Header { public const byte ReservedSize = 20; public byte Dbf; public byte Year; public byte Mounth; public byte Day; public int RecordCount; public ushort HeaderSize; public ushort RecordSize; [MarshalAs(UnmanagedType.ByValArray, SizeConst = ReservedSize)] public byte[] Reserved; }  W przypadku miesiąca i dnia jest to zakres wystarczający.</description>
    </item>
    
    <item>
      <title>SmtpClient i &lt;mailSettings&gt;</title>
      <link>https://awasn.github.io/smtpclient-i-mailsettings/</link>
      <pubDate>Thu, 18 Sep 2008 15:47:00 +0200</pubDate>
      
      <guid>https://awasn.github.io/smtpclient-i-mailsettings/</guid>
      <description>Czasami małe rzeczy sprawiają dużo radości. Jedną z nich jest możliwość ustawienia klienta pocztowego SmptClient poprzez wpisy w pliku konfiguracyjnym aplikacji. Rozważmy przykład:
string mailAddresses = ConfigurationManager. AppSettings[&amp;quot;mailAddresses&amp;quot;]; if (string.IsNullOrEmpty(mailAddresses)){ return; } MailMessage message = new MailMessage(); message.From = new MailAddress(&amp;quot;wnioski@homski.pl&amp;quot;, &amp;quot;Wnioski&amp;quot;); foreach (string mailAddress in mailAddresses.Split(&#39;;&#39;)){ message.To.Add(new MailAddress(mailAddress)); } message.SubjectEncoding = Encoding.UTF8; message.Subject = &amp;quot;Tytuł wiadomości&amp;quot;; message.BodyEncoding = Encoding.UTF8; message.Body = &amp;quot;Treść wiadomości&amp;quot;; SmtpClient client = new SmtpClient(); client.Send(message);  Z pliku config aplikacji pobieram informację o adresach, do których należy pocztę wysłać.</description>
    </item>
    
    <item>
      <title>Implementacja Inversion of Control</title>
      <link>https://awasn.github.io/implementacja-inversion-of-control/</link>
      <pubDate>Sun, 24 Aug 2008 11:49:00 +0200</pubDate>
      
      <guid>https://awasn.github.io/implementacja-inversion-of-control/</guid>
      <description>Jedną z cech dobrego oprogramowania są luźne powiązania pomiędzy klasami. Droga do tego celu ciężka i kręta. Bez dwóch zdań. Wśród technik i wzorców, które należy w tym celu stosować znajdują się fabryki (Factory) oraz lokalizatory usług (Service Locator), dzięki którym tworzeniem instancji obiektów czy implementacji zadanych interfejsów zajmują się wyspecjalizowane klasy. Z tworzeniem obiektów, w kontekście wymienionych powyżej praktyk, związane są następujące koncepcje:
 Inversion of Control - instancje klas pobierane są z zewnętrznych zasobów; Dependency Injection - tworzenie instancji zleca się zewnętrznemu obiektowi (kontenerowi) znającemu zależności pomiędzy właściwymi klasami.</description>
    </item>
    
    <item>
      <title>Refaktoryzacja metod zwrotnych</title>
      <link>https://awasn.github.io/refaktoryzacja-metod-zwrotnych/</link>
      <pubDate>Sun, 20 Jul 2008 00:57:00 +0200</pubDate>
      
      <guid>https://awasn.github.io/refaktoryzacja-metod-zwrotnych/</guid>
      <description>Najnowsza refaktoryzacja kodu jednego z moich projektów polegała na usunięciu wszystkich własnych definicji delegatów będących metodami zwrotnymi. Zamiast tego użyłem standardowych metod z przestrzeni nazw System:
 Action; Action&amp;lt;T&amp;gt;; Action&amp;lt;T1, T2&amp;gt;; Action&amp;lt;T1, T2, T3&amp;gt;; Action&amp;lt;T1, T2, T3, T4&amp;gt;.  dla metod zwrotnych, które nie zwracają wartości oraz:
 Func&amp;lt;TResult&amp;gt;; Func&amp;lt;T, TResult&amp;gt;; Func&amp;lt;T1, T2, TResult&amp;gt;; Func&amp;lt;T1, T2, T3, TResult&amp;gt;; Func&amp;lt;T1, T2, T3, T4, TResult&amp;gt;.  dla metod zwrotnych zwracających wartość.
Dzięki temu zniknęło kilka klas.</description>
    </item>
    
    <item>
      <title>Range&lt;T&gt;</title>
      <link>https://awasn.github.io/range-t/</link>
      <pubDate>Fri, 11 Jul 2008 15:30:00 +0200</pubDate>
      
      <guid>https://awasn.github.io/range-t/</guid>
      <description>Porównań i walidacji w kodzie zawsze dużo jest. Czasem, jak u mnie ostatnio, warto spreparować sobie specjalną klasę operacje tego typu ułatwiającą. Koncept nie jest nowy. Poczytać można o nim między innymi na stronie Martina Fowlera. Ciekawa natomiast jest implementacja, którą można wykonać korzystając z platformy .NET.
Pierwsza wersja klasy w najważniejszych swoich częściach wyglądała następująco:
class Range&amp;lt;T&amp;gt; { private readonly T minimum; private readonly T maximum; private readonly bool rangeIsExclusive; public bool Included(T value) { Debug.</description>
    </item>
    
    <item>
      <title>MarshalHelper zarządza niezarządzanym</title>
      <link>https://awasn.github.io/marshalhelper-zarzadza-niezarzadzanym/</link>
      <pubDate>Wed, 04 Jun 2008 14:01:00 +0200</pubDate>
      
      <guid>https://awasn.github.io/marshalhelper-zarzadza-niezarzadzanym/</guid>
      <description>W notce dotyczącej iteratorów czy też kiedy opisywałem operacje na plikach DBF posługiwałem się klasą pomocniczą MarshalHelper, która wykonywała wszystkie niezbędne czynności przy konwersji typów z kodu zarządzanego do niezarządzanego i vice versa. Wykorzystanie klas przestrzeni System.Runtime.InteropServices było konieczne, ponieważ w kodzie zarządzanym nie mamy gwarancji, iż pola z danej struktury będą w pamięci ułożone w tej samej kolejności i wyrównane powiedzmy do 8 bajtów.
Sama implementacja metod pomocniczych klasy nie jest skomplikowana.</description>
    </item>
    
    <item>
      <title>Iteratory</title>
      <link>https://awasn.github.io/iteratory/</link>
      <pubDate>Mon, 26 May 2008 23:06:00 +0200</pubDate>
      
      <guid>https://awasn.github.io/iteratory/</guid>
      <description>Mój pierwszy blog znajdował się na portalu developers.pl. Niestety z różnych przyczyn serwis ten padł. A szkoda. Choćby dlatego, iż miałem tam kilka ciekawych wpisów. Nie chciałbym aby zostały one wszystkie stracone dlatego też postanowiłem jeden z nich przypomnieć (również sobie). Ciekawa była optymalizacja pierwotnego kodu w ramach komentarzy do tej notki&amp;hellip;
Jedną z nowości .NET w wersji 2.0 są (dzisiaj już możemy powiedzieć, że były) iteratory. Dzięki nim przekazywanie kolekcji obiektów czy struktur pomiędzy klasami nie musi już oznaczać zajmowania nowych, pomocniczych obszarów w pamięci, co konieczne było zwłaszcza jeśli nasze oprogramowanie zbudowane było w oparciu o warstwy (dostępu do danych, logiki biznesowej czy prezentacji).</description>
    </item>
    
    <item>
      <title>Nie wyrzucamy wyjątków poza Domain Model</title>
      <link>https://awasn.github.io/nie-wyrzucamy-wyjatkow-poza-domain-model/</link>
      <pubDate>Tue, 25 Mar 2008 11:47:00 +0100</pubDate>
      
      <guid>https://awasn.github.io/nie-wyrzucamy-wyjatkow-poza-domain-model/</guid>
      <description>Udi Dahan na swoim blogu umieścił ciekawy wpis poświęcony programowaniu według wzorca Domain Model. Jeden z wniosków płynących z tego artykułu, to rezygnacja z wyrzucania wyjątków poza Domain Model, czy też szerzej, poza całą warstwę logiki biznesowej. Jest to zdecydowanie inne podejście od większości promowanych reguł budowania aplikacji złożonych z warstw, gdzie zazwyczaj zaleca się, aby w danej warstwie zdefiniować własny wyjątek i wszystkie przez nas generowane lub wyłapane wyjątki z warstw niższych (zależnych) opakowywać wyjątkiem warstwy i przekazywać dalej.</description>
    </item>
    
    <item>
      <title>Hook scripts w C#</title>
      <link>https://awasn.github.io/hook-scripts-w-csharp/</link>
      <pubDate>Tue, 12 Feb 2008 16:48:00 +0100</pubDate>
      
      <guid>https://awasn.github.io/hook-scripts-w-csharp/</guid>
      <description>W strukturze katalogów składających się na repozytorium Subversion znajduje się folder o nazwie hooks. Zawiera on skrypty przechwytujące (hook scripts). Skrypty te wywoływane są w momencie zajścia w repozytorium określonego zdarzenia. Może to być np. żądanie zablokowania zasobu czy próba zatwierdzenia zmian. Przypisanie do zdarzenia następuje poprzez nadanie skryptowi odpowiedniej, rozpoznawalnej przez SVN nazwy. Mimo stosowania pojęcia skrypt, mogą to być tak naprawdę dowolne pliki wykonywalne. Nic nie stoi na przeszkodzie, abyśmy wykorzystali w tej roli język C#.</description>
    </item>
    
    <item>
      <title>HTTP - Własny serwer komunikacji. Część #2 - Środowisko programistyczne</title>
      <link>https://awasn.github.io/http-wlasny-serwer-komunikacji-cz2-srodowisko-programistyczne/</link>
      <pubDate>Sun, 27 Jan 2008 22:12:00 +0100</pubDate>
      
      <guid>https://awasn.github.io/http-wlasny-serwer-komunikacji-cz2-srodowisko-programistyczne/</guid>
      <description>Zasadniczo całe rozwiązanie zbudowane będzie przy pomocy Microsoft Visual Studio 2005 Professional Edition w oparciu o ASP.NET Web Application jako typ projektu. Użytkownicy wersji Express będą niestety zmuszeni dokonać konwersji do projektu Web Site. Dostarczany z Visual Studio serwer WWW w zupełności wystarczy do uruchomienia prezentowanego rozwiązania. Z racji wybranego środowiska operować będziemy na platformie .NET w wersji 2.0. Nie mniej jednak bez żadnych zmian prezentowane oprogramowanie będzie działało również w wersji 1.</description>
    </item>
    
    <item>
      <title>HTTP - Własny serwer komunikacji. Część #1 - Wstęp</title>
      <link>https://awasn.github.io/http-wlasny-serwer-komunikacji-cz1-wstep/</link>
      <pubDate>Mon, 14 Jan 2008 22:45:00 +0100</pubDate>
      
      <guid>https://awasn.github.io/http-wlasny-serwer-komunikacji-cz1-wstep/</guid>
      <description>Budując rozwiązanie, które wymaga wymiany informacji z aplikacjami uruchomionymi na innych maszynach możemy skorzystać z kilku propozycji, jakich dostarcza platforma .NET. Są to między innymi gniazdka (sockets), .NET Remoting, Usługi Sieciowe (Web Services), kolejki wiadomości (MSMQ) czy łączący i uzupełniający większość z tych rozwiązań Windows Communication Foundation (WCF). Oczywiście część z tych metod działa praktycznie tylko wtedy, jeśli obie strony oparte są o .NET (.NET Remoting czy net.tcp z WCF). Inne znów mają problemy jeśli wychodzimy poza obręb danej sieci (.</description>
    </item>
    
    <item>
      <title>ReSharper ostrzega - Possible NullReferenceException</title>
      <link>https://awasn.github.io/resharper-ostrzega-possible-nullreferenceexception/</link>
      <pubDate>Wed, 09 Jan 2008 23:15:00 +0100</pubDate>
      
      <guid>https://awasn.github.io/resharper-ostrzega-possible-nullreferenceexception/</guid>
      <description>Kontekst rozważań jest następujący. Metoda (wersja uproszczona poniżej) buduje ściśle określoną sekwencję sterującą. Dokumentacja mówi, iż sekwencja ta musi zawierać dokładnie osiem parametrów oddzielonych średnikiem. Dopuszcza się przy tym parametry puste. Użytkownik nie jest karany (np. wyjątek) za brak parametrów. Nie spotka go też przykra niespodzianka, jeśli poda zbyt dużo parametrów.
public void SampleReport(string[] names) { const byte maxNumberOfNames = 8; int numberOfNames = names == null ? 0 : names.</description>
    </item>
    
    <item>
      <title>Metoda fabryki</title>
      <link>https://awasn.github.io/metoda-fabryki/</link>
      <pubDate>Thu, 27 Dec 2007 21:27:00 +0100</pubDate>
      
      <guid>https://awasn.github.io/metoda-fabryki/</guid>
      <description>Poniższy tekst bazuje na prezentacji, którą przeprowadziłem 13 grudnia 2007 na połączonym XVI Spotkaniu Warszawskiej Grupy .NET + VII Spotkaniu Polskiej Grupy Użytkowników SQL Server.
Wstęp Metoda fabryki (ang. Factory Method) jest, obok signletona czy budowniczego, wzorcem kreacyjnym odpowiadającym za tworzenie obiektów - instancji klas. Główne zadanie metody fabryki to oddzielenie procesu korzystania z obiektów od ich tworzenia.
Wyobraźmy sobie aplikację w wersji standardowej przeznaczoną do obsługi sprzedaży, w której dla kilku klientów dokonujemy modyfikacji.</description>
    </item>
    
    <item>
      <title>Dynamiczna budowa poprawnego pliku docx w standardzie Open XML</title>
      <link>https://awasn.github.io/dynamiczna-budowa-poprawnego-pliku-docx-w-standardzie-open-xml/</link>
      <pubDate>Sat, 24 Nov 2007 00:22:00 +0100</pubDate>
      
      <guid>https://awasn.github.io/dynamiczna-budowa-poprawnego-pliku-docx-w-standardzie-open-xml/</guid>
      <description>Konieczność utworzenie dokumentu, który byłby stały w treści a gdzie tylko niektóre elementy, np. imię i nazwisko, powinny się zmieniać dynamicznie jest sytuacją nieobcą chyba każdemu programiście czy informatykowi. Rozwiązań takiego problemu jest wiele.
Ostatnio w poszukiwaniu absolutu zainteresowałem się pakietem Microsoft Office, a konkretnie aplikacją Word 2007. Cały pakiet do zapisywania danych wykorzystuje nowy format plików bazujący na standardzie Open XML. Standardzie nota bene promowanym przez sam Microsoft. Nowe pliki łatwo poznać po literze x dodawanej do rozszerzenia znanego z wcześniejszych wersji.</description>
    </item>
    
    <item>
      <title>FormsAuthentication w Reporing Services</title>
      <link>https://awasn.github.io/formsauthentication-w-reporing-services/</link>
      <pubDate>Thu, 15 Nov 2007 14:41:00 +0200</pubDate>
      
      <guid>https://awasn.github.io/formsauthentication-w-reporing-services/</guid>
      <description>Domyślnie usługi raportujące Microsoft SQL Server 2005 obsługują jedynie identyfikację Windows. Na szczęście w przykładach dla Reporitng Services dostępnych na stronach http://www.codeplex.com dostępna jest implementacja rozszerzeń usług raportujących (interfejsy IAuthenticationExtension i IAuthorizationExtension), które umożliwiają skorzystanie z dobrodziejstw identyfikacji opartej o Forms. Jeśli zainstalujemy przykłady, to interesujące nas kody znajdziemy w katalogu C:\Program Files\Microsoft SQL Server\90\Samples\Reporting Services\Extension Samples\FormsAuthentication Sample zakładając oczywiście, iż wybraliśmy domyślną lokalizację.
Przykładowe rozwiązanie korzysta z własnej bazy danych do przechowywania informacji o użytkownikach.</description>
    </item>
    
    <item>
      <title>&lt;![CDATA[]]&gt; kills VS2K5</title>
      <link>https://awasn.github.io/cdata-kills-vs2k5/</link>
      <pubDate>Tue, 06 Nov 2007 22:04:00 +0100</pubDate>
      
      <guid>https://awasn.github.io/cdata-kills-vs2k5/</guid>
      <description>Królestwo za nawiasy ostre w komentarzu, który zawiera powyższą sekcję. Nie ma znaczenie gdzie będziemy je próbowali wstawić. Czy w samej sekcji CDATA, czy też w innym miejscu w ramach istniejącego już komentarza. Visual Studio 2005 robi kaput.
PS. Podziękowania dla Michała, który brał udział w eksperymencie i robił za przysłowiową świnkę doświadczalną.
Z powyższego tekstu nie wynika to jasno, ale chodzi o komentarze do kodu C#:
/// &amp;lt;summary&amp;gt; /// &amp;lt;!</description>
    </item>
    
    <item>
      <title>Visual Studio T4 Editor</title>
      <link>https://awasn.github.io/visual-studio-t4-editor/</link>
      <pubDate>Mon, 22 Oct 2007 10:06:00 +0200</pubDate>
      
      <guid>https://awasn.github.io/visual-studio-t4-editor/</guid>
      <description>Wszystkim, których interesuje temat szablonów tekstowych T4 (Text Templating Transformation Toolkit), a myślę, że przynajmniej w Warszawskiej Grupie .NET po XI spotkaniu kilka osób się znajdzie, polecam stronę http://www.t4editor.net gdzie znajdziemy darmową, aczkolwiek czasową (styczeń 2008 roku) wersję beta edytora szablonów T4 instalującego się jako dodatek do Visual Studio.
Szablony T4 wykorzystywane są przez wszystkie niemal Software Factories firmy Microsoft oraz narzędzia oparte o DSL. Dla szukających wiedzy na ten temat polecam swój artykuł w drugim numerze gazetki zine.</description>
    </item>
    
    <item>
      <title>Konkurs Enterprise Library - Logging (LAB)</title>
      <link>https://awasn.github.io/konkurs-enterprise-library-logging-lab/</link>
      <pubDate>Mon, 24 Sep 2007 11:32:00 +0200</pubDate>
      
      <guid>https://awasn.github.io/konkurs-enterprise-library-logging-lab/</guid>
      <description>Refaktoryzacja do Logging Application Block Potrzebujemy możliwości śledzenia zachodzących w aplikacji zdarzeń. Ważne jest, aby informacje mogły być zapisywane w jak największej liczbie miejsc takich jak pliki, bazy danych czy poczta elektroniczna, a sama konfiguracja była niezależna od kodu programu.
Aby to osiągnąć korzystamy z możliwości Enterprise Library Logging Application Block w wersji 3.1 - May 2007.
Uzasadnienie Możliwość rejestracji zdarzeń (logging) zachodzących w aplikacji jest cechą bardzo pożądaną. Nie należy jednak przez zdarzenia rozumieć jedynie błędy czy problemy pojawiające się w czasie działania programu.</description>
    </item>
    
    <item>
      <title>SQL Server 2005 Compact Edition</title>
      <link>https://awasn.github.io/sql-server-2005-compact-edition/</link>
      <pubDate>Thu, 13 Sep 2007 14:13:00 +0200</pubDate>
      
      <guid>https://awasn.github.io/sql-server-2005-compact-edition/</guid>
      <description>Pewną nowością było wprowadzenie przez Microsoft na komputery typu PC, dostępnej do tej pory we wcześniejszych wersjach w ramach urządzeń mobilnych, bazy danych SQL Server 2005 Compact Edition (http://www.microsoft.com/sql/editions/compact/default.mspx), która nie wymaga instalacji żadnego serwera bazodanowego a do obsługi potrzebuje jednej biblioteki System.Data.SqlServerCe.dll. Dzięki temu, zamiast przechowywać dane niezbędne do pracy aplikacji np. w plikach XML możemy skorzystać z możliwości silnika SQL. Z tego typu sytuacjami niejednokrotnie się spotykamy. Instalacja dowolnego serwera nie jest możliwa, a jednocześnie szukamy możliwości sprawnego zarządzania niedużą ilością danych.</description>
    </item>
    
    <item>
      <title>Tworzenie obiektów</title>
      <link>https://awasn.github.io/tworzenie-obiektow/</link>
      <pubDate>Wed, 04 Jul 2007 13:55:00 +0200</pubDate>
      
      <guid>https://awasn.github.io/tworzenie-obiektow/</guid>
      <description>W powyższej kwestii pojawiło się od czasu słowa kluczowego new trochę nowych metod i związanych z tym pojęć. W poszukiwaniu optymalnego kodu warto zwrócić uwagę na następujące pojęcia:
 Inversion of Control - obiekt nie tworzy samodzielnie żadnych wymaganych przez siebie instancji klas. Zamiast tego pobiera je z zewnętrznych zasobów; Push. Don&amp;rsquo;t Pull - obiekt nie tworzy samodzielnie żadnych wymaganych przez siebie instancji klas. Zamiast tego są mu one przekazywane jako parametry konstruktora lub właściwości; Dependency Injection - tworzenie instancji wymaganych klas zleca się obiektowi (kontenerowi) zewnętrznemu, który zna zależności pomiędzy klasami.</description>
    </item>
    
    <item>
      <title>Herr Mock i Frau Command</title>
      <link>https://awasn.github.io/herr-mock-i-frau-command/</link>
      <pubDate>Thu, 21 Jun 2007 17:01:00 +0200</pubDate>
      
      <guid>https://awasn.github.io/herr-mock-i-frau-command/</guid>
      <description>Sławetny wzorzec Model-View-Presenter ma swoje zalety, ale ma i swoje uciążliwości. Jedna z wykorzystywanych przeze mnie implementacji tego wzorca zakłada, iż widok będzie posiadał funkcję umożliwiającą dodawanie do menu widoku kolejnych poleceń, które będą zawierały metody zwrotne wywoływane jako reakcja w przypadku wykonania polecenia. Jest to o tyle konieczne, iż np. formularz wyświetlający tabelę może zachowywać się różnie (obsługiwać różne zestawy poleceń) w zależności od danych, które ma zaszczyt prezentować. Weźmy pod uwagę fragment prezentera umożliwiającego identyfikację użytkownika.</description>
    </item>
    
    <item>
      <title>DBF po ludzku</title>
      <link>https://awasn.github.io/dbf-po-ludzku/</link>
      <pubDate>Tue, 12 Jun 2007 15:02:00 +0200</pubDate>
      
      <guid>https://awasn.github.io/dbf-po-ludzku/</guid>
      <description>Jakiś czas temu Sławek pisał o dostępie poprzez sterowniki ODBC do tabel w formacie Excel. W podobny sposób można również próbować przetwarzać pliki DBF. Ale można też prościej&amp;hellip; bardziej po ludzku&amp;hellip;
Wersji formatu DBF jest oczywiście wiele, ale my zajmiemy się wersją 3, bardzo popularną zwłaszcza w środowisku MS-DOS. Niezbędne będzie przy tym skorzystanie z przestrzeni nazw InteropServices umożliwiającej dostęp do kodu niezarządzanego.
Każdy plik DBF składa się z nagłówka</description>
    </item>
    
    <item>
      <title>Wyjątki</title>
      <link>https://awasn.github.io/wyjatki/</link>
      <pubDate>Tue, 15 May 2007 13:19:00 +0200</pubDate>
      
      <guid>https://awasn.github.io/wyjatki/</guid>
      <description>Jednym z elementów podlegających testowaniu jest sprawdzanie zachowania kodu w przypadku otrzymania nieprawidłowych danych. Reakcją na tego typu zdarzenia może być wyrzucanie wyjątków. Czasem jednak mogą powstać z tego tytułu pewne komplikacje. Załóżmy, że mamy do przetestowania poniższą klasę:
class CommandLibraryLocator : ICommandLibraryLocator { private ILibraryRepository libraryRepository; public CommandLibraryLocator(ILibraryRepository libraryRepository) { if (libraryRepository == null) throw new ArgumentNullException(&amp;quot;libraryRepository&amp;quot;); this.libraryRepository = libraryRepository; } public string GetPath(UserIdentity identity) { if (identity == null) throw new ArgumentNullException(&amp;quot;identity&amp;quot;); .</description>
    </item>
    
    <item>
      <title>Liczby całkowite</title>
      <link>https://awasn.github.io/liczby-calkowite/</link>
      <pubDate>Thu, 10 May 2007 12:44:00 +0200</pubDate>
      
      <guid>https://awasn.github.io/liczby-calkowite/</guid>
      <description>Ostatnimi czasy byłem granatem oderwany od .NET i przerzucony na front języka AMBASIC, Symfonii Handel i jej raportów (konkretnie chodziło o integrację z systemem RouteSpider, którym się obecnie między innymi zajmuję).
Analizując tabele Symfonii mogłem zaobserwować, jak twórcy tego produktu musieli się zmierzyć z problemem wydajności. Część pól występuje bowiem w strukturach podwójnie. Jako pole tekstowe oraz pole numeryczne, przy czym nazwa pola numerycznego jest niczym więcej jak nazwą pola tekstowego z dodaną na końcu literką i.</description>
    </item>
    
    <item>
      <title>T4 lepsze niż T34</title>
      <link>https://awasn.github.io/t4-lepsze-niz-t34/</link>
      <pubDate>Mon, 23 Apr 2007 10:20:00 +0200</pubDate>
      
      <guid>https://awasn.github.io/t4-lepsze-niz-t34/</guid>
      <description>Poniższy tekst bazuje na artykule mojego autorstwa z drugiego numeru gazetki zine.net. Względem oryginału zrezygnowano jedynie z odwoływanie się do kodu źródłowego jako do rysunku oraz zmieniono numerację wstawionych zrzutów ekranu.
Wszelkie nazwy własne oraz podane wersje aplikacji i bibliotek odzwierciedlają stan na koniec 2006 roku.
Wstęp T4 oznacza Text Template Transformation Toolkit. Jest to dostarczany przez Microsoft w postaci biblioteki Microsoft.VisualStudio.TextTemplating.dll silnik do generowania tekstu na podstawie zdefiniowanych przez użytkownika szablonów.</description>
    </item>
    
  </channel>
</rss>